{"tagline":"A shell for new Go webapps","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"### Introduction\r\n\r\n`webshell` is a simple framework for quickly getting started with new\r\nwebapps in Go. It loads all of its configuration from environment\r\nvariables, and can be configured for TLS or insecure operation.\r\n\r\n```go\r\n// example/example.go: very quick example program\r\npackage main\r\n\r\nimport (\r\n        \"github.com/gokyle/webshell\"\r\n        \"net/http\"\r\n)\r\n\r\nfunc hello_world(w http.ResponseWriter, r *http.Request) {\r\n        w.Write([]byte(\"hello, \" + r.RemoteAddr))\r\n}\r\n\r\nfunc main() {\r\n        // load the requisite environment variables\r\n        webshell.LoadEnv()\r\n        // add an endpoint to our server\r\n        webshell.AddRoute(\"/hello\", hello_world)\r\n        // start a HTTP-only web server\r\n        webshell.Serve(false, nil)\r\n}\r\n```\r\n\r\n### Configuration\r\n\r\n`webshell` by default pulls its configuration in from the environment.\r\n`LoadEnv()` will set the relevant variables. However, this can be\r\nbypassed to use your own configuration method. The relevant variables\r\nare (note that the environment variables have the same name):\r\n\r\n* `SERVER_ADDR` contains the address the server should listen on.\r\n* `SERVER_PORT` contains the port the server should listen on.\r\n* `SSL_KEY` contains the path to the SSL private key.\r\n* `SSL_CERT` contains the path to the SSL certficate.\r\n\r\nFor example, to load the server address from a function called\r\n`LoadAddressFromDB`:\r\n\r\n```go\r\nwebshell.SERVER_ADDR = LoadAddressFromDB()\r\n```\r\n\r\nAnother alternative is the [`goconfig`](https://github.com/gokyle/goconfig)\r\npackage.\r\n\r\nAn example shell script that can be sourced to sane defaults for the\r\nserver may be found in `examples/env.sh`.\r\n\r\n### Examples\r\nContained in the `examples` subdirectory:\r\n* `basic`: bare bones example\r\n* `templates`: templating example\r\n* `static`: demonstrates the use of the static serving functions\r\n\r\nEach example should be run from its respective directory, as some use\r\nrelative paths in their routes.\r\n\r\n### License\r\n\r\n`webshell` is licensed under an ISC license. The `LICENSE` file contains\r\nthe full text of the license.\r\n\r\n","name":"Webshell","google":""}